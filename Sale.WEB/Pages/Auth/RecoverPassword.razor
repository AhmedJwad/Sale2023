@page "/RecoverPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if(Loading)
{
    <div class="spinner"></div>
}
<div class="row">
    <div class="col-6">
        <EditForm Model="emailDTO" OnValidSubmit="SendRecoverPasswordEmailTokenAsync">
            <DataAnnotationsValidator/>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-key" /> Send email for password recovery
                        <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-loop-square" /> Send</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@emailDTO.Email" />
                            <ValidationMessage For="@(() => emailDTO.Email)" />
                        </div>
                    </div>

                </div>
            </div>
        </EditForm>
    </div>
</div>
@code {
    private EmailDTO emailDTO = new();
    private bool Loading;

    private async Task SendRecoverPasswordEmailTokenAsync()
    {
        Loading = true;
        var responsehttp = await repository.Post("/api/accounts/RecoverPassword", emailDTO);
        if (responsehttp.Error)
        {
            var message = await responsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            Loading = false;
            return;
        }
        Loading = false;
        await sweetAlertService.FireAsync("Confirmation",
        "An email has been sent to you with instructions to recover your password",
        SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }
}
