@page "/ChangePassword"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]
@if (loading)
{
    <div class="spinner" />
}
<div class="row">
    <div class="col-6">
        <EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator />
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-key" /> Change Password
                        <a class="btn btn-sm btn-success float-end" href="/editUser"><i class="oi oi-arrow-thick-left" /> Go back</a>
                        <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Save Changes</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Current password::</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.CurrentPassword" />
                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>New Password:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.NewPassword" />
                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>New password confirmation:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.Confirm" />
                            <ValidationMessage For="@(() => changePasswordDTO.Confirm)" />
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    private async Task ChangePasswordAsync()
    {
       loading = true;
        var responsehttp = await repository.Post($"/api/accounts/changePassword", changePasswordDTO);
        if(responsehttp.Error)
        {
            var message = await responsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }
          loading = false;
        navigationManager.NavigateTo("/EditUser");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Password changed successfully.");
    }

    

}
