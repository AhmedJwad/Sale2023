@page "/Register"

@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginservice

<h3>Register New User</h3>

<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
 <DataAnnotationsValidator/>

    <div class="row">
        <div class="col-6">
            <div class="mb-3">
                <label>First Name:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Firstname" />
                    <ValidationMessage For="@(() => userDTO.Firstname)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Last Name:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                    <ValidationMessage For="@(() => userDTO.LastName)" />
                </div>
            </div>
            <div class="mb-3">
            <label>Document:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Document" />
                    <ValidationMessage For="@(() => userDTO.Document)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Phone:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                    <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                </div>
            </div>
            <div class="mb-3">
            <label>Address:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Address" />
                    <ValidationMessage For="@(() => userDTO.Address)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Email:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Email" />
                    <ValidationMessage For="@(() => userDTO.Email)" />
                </div>
            </div>
        </div>
        <div class="col-6">
            <div class="mb-3">
                <label>Countries:</label>
                <div>
                    <select class="form-select" @onchange="CountryChangedAsync">
                        <option value="0">-- Select a country --</option>
                        @if (countries is not null)
                        {
                            @foreach (var country in countries)
                            {
                                <option value="@country.Id">@country.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="mb-3">
                <label>state/department:</label>
                <div>
                    <select class="form-select" @onchange="StateChangedAsync">
                        <option value="0">-- Select a state/department --</option>
                        @if (states is not null)
                        {
                            @foreach (var state in states)
                            {
                                <option value="@state.Id">@state.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="mb-3">
                <label>Cities:</label>
                <div>
                    <select class="form-select" @bind="userDTO.CityId">
                        <option value="0">-- Select a city --</option>
                        @if (cities is not null)
                        {
                            @foreach (var city in cities)
                            {
                                <option value="@city.Id">@city.Name</option>
                            }
                        }
                    </select>
                    <ValidationMessage For="@(() => userDTO.CityId)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Photo:</label>
                <div>
                    <InputText class="form-control" @bind-Value="@userDTO.Photo" />
                    <ValidationMessage For="@(() => userDTO.Photo)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Password:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                    <ValidationMessage For="@(() => userDTO.Password)" />
                </div>
            </div>
            <div class="mb-3">
                <label>Password Confirmation:</label>
                <div>
                    <InputText type="password" class="form-control" @bind-Value="@userDTO.PasswordConfirm" />
                    <ValidationMessage For="@(() => userDTO.PasswordConfirm)" />
                </div>
            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Register</button>
</EditForm>

@code {
    private UserDTO userDTO = new();
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
    }
    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedcountry=Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedcountry);
    }
    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedstate=Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedstate);
    }
    private async Task LoadCountriesAsync()
    {
        var responsehttp = await repository.Get<List<Country>>($"/api/countries/combo");
        if(responsehttp.Error)
        {
            var message = await responsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        countries = responsehttp.Response;
    }
    private async Task LoadStatesAsyn(int countryId)
    {
        var responsehttp = await repository.Get<List<State>>($"/api/states/combo/{countryId}");
        if (responsehttp.Error)
        {
            var message = await responsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        states = responsehttp.Response;
    }
    private async Task LoadCitiesAsyn(int stateId)
    {
        var responsehttp = await repository.Get<List<City>>($"/api/cities/combo/{stateId}");
        if (responsehttp.Error)
        {
            var message = await responsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        cities = responsehttp.Response;
    }
    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var repostoryhttp = await repository.Post<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if(repostoryhttp.Error)
        {
            var message = await repostoryhttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("error", message, SweetAlertIcon.Error);
        }
        await loginservice.LoginAsync(repostoryhttp.Response!.Token);
        navigationManager.NavigateTo("/");

    }
}
