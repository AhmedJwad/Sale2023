@page "/categories"
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject IRepository repository
@attribute [Authorize(Roles ="Admin")]
@if (categories is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="categories">
       <Body>
           <div class="card">
               <div class="card-header">
                   <span>
                        <i class="oi oi-list"></i> Categories
                        <a class="btn btn-sm btn-primary float-end" href="/categories/create"><i class="oi oi-plus"></i> Add Category</a>

                   </span>
                   <div class="card-body">
                       <div class="m-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                           <div>
                                 <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search category..." @bind-value="filter" />

                           </div>
                           <div class="mx-1">
                               <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filter</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clear</button>

                           </div>
                       </div>
                         <Pagination CurrentPage="CurrentPage"
                            TotalPages="totalPages"
                            SelectedPage="SelectedPageAsync" />
                                  <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Category</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories)
                            {
                                <tr>
                                    <td>
                                        @category.Name
                                    </td>
                                    <td>
                                        <a href="/categories/edit/@category.Id" class="btn btn-warning"><i class="oi oi-pencil" /> Edit</a>
                                        <button class="btn btn-danger" @onclick=@(() => Delete(category.Id))><i class="oi oi-trash" /> Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>

                   </div>
               </div>
           </div>
        </Body>
    </GenericList>
}

@code {
    public List<Category> categories { get; set; } = null!;
    private int CurrentPage = 1;
    private int totalPages;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();

    }
    private async Task SelectedPageAsync(int page)
    {
        CurrentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(filter))
        {
            url1 = $"api/categories?page={page}";
            url2 = $"api/categories/totalPages";
        }
        else
        {
            url1 = $"api/categories?page={page}&filter={filter}";
            url2 = $"api/categories/totalPages?filter={filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<Category>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            categories = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task Delete(int categoryId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Are you sure you want to delete the record?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/categories/{categoryId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await LoadAsync();
        }
    }

    private async Task CleanFilterAsync()
    {
        filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
