@page "/"
@inject IRepository repostery 
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
<style type="text/css">
    .card {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 15px;
        font-family: sans-serif;
        margin: 5px;
    }
</style>

@if (products is null)
{
    <div class="spinner" />
}
else
{
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search..." @bind-value="filter" />
        </div>
        <div class="mx-1">
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filter</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clean</button>
        </div>
        <AuthorizeView>
            <Authorized>
                @if (counter > 0)
                {
                    <a href="/Orders/ShowCart" class="btn btn-primary">View Shopping Cart (@counter)</a>
                }
            </Authorized>
        </AuthorizeView>
    </div>
    


    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPageAsync" />

    <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
        @foreach (var product in products!)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="text-center zoom">
                        <img src="@($"{navigationManager.BaseUri}images/{@product.MainImage}")" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-navy"> @product.Name</h5>
                        <p class="card-text smfnt">@product.Description</p>
                        <h5 class="text-muted">@($"{product.Price:C2}")</h5>
                    </div>
                    <div class="card-footer text-center">
                        <a href="/products/details/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info" /> Details</a>
                        <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
<footer>
    Deleveloped by Ahmed Al murshadi | Amm380@yahoo.com @DateTime.Now;
</footer>



@code {
    private int currentPage = 1;
    private int totalPages;
    public List<Product>? products {get; set;}
    private int  counter=0;
    private bool isAuthenticated;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";
    [Parameter]
    [SupplyParameterFromQuery]
    public string filter { get; set; } = "";
    [CascadingParameter]
    private Task<AuthenticationState>authenticationStateTask {get; set;}=null!;

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
        await CheckIsAuthenticatedAsync();
        await LoadCounterAsync();


    }
    private async Task CheckIsAuthenticatedAsync()
    {
        var authenticationstate=await authenticationStateTask;
        isAuthenticated = authenticationstate.User.Identity!.IsAuthenticated;
    }

    private async Task  LoadCounterAsync()
    {
        if(!isAuthenticated)
        {
            return;
        }
        var responsehttp=await repostery.Get<int>("/api/temporalSales/count");
        if(responsehttp.Error)
        {
            return;
        }
        counter = responsehttp.Response;

    }
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page=1)
    {

        if(!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }
        var url1 = string.Empty;
        var url2 = string.Empty;
        if(string.IsNullOrEmpty(filter))
        {
            url1 = $"api/products?page={page}&RecordsNumber=8";
            url2 = $"api/products/totalPages/?RecordsNumber=8";
        }
        else
        {
            url1 = $"api/products?page={page}&filter={filter}&RecordsNumber=8";
            url2 = $"api/products/totalPages?filter={filter}&RecordsNumber=8";

        }
        try
        {
            var responsehttp1 = await repostery.Get<List<Product>>(url1);
            var responsehttp2=await repostery.Get<int>(url2);
            products = responsehttp1.Response!;
            totalPages=responsehttp2.Response!;

        }
        catch (Exception ex)
        {

            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }
    private async Task CleanFilterAsync()
    {
        filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task AddToCartAsync(int productId)
    {
        if(!isAuthenticated)
        {
            navigationManager.NavigateTo("/login");
            var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast=true,
                Position=SweetAlertPosition.TopEnd,
                ShowConfirmButton=false,
                Timer=5000,
            });
            await toast1.FireAsync(icon: SweetAlertIcon.Error, message: 
            "You must be logged in to be able to add products to the shopping cart.");
            return;
        }
        var temporalSaleDTO = new TemporalSaleDTO
        {
            ProductId=productId,
        };
         var httpResponse = await repostery.Post("/api/temporalSales", temporalSaleDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await LoadCounterAsync();

        var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = false,
            Timer = 5000
        });
        await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Product added to shopping cart.");
    }

    


}