@page "/country"
@inject IRepository Repostory
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
<h3>CountriesIndex</h3>
<a class="btn btn-sm btn-primary float-end" href="/countries/create"> Add Country</a>
<GenericList MyList="Countries">
   
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StateNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/countries/Details/@country.Id">Details</a>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Edit</a>
                            <button class="btn btn-danger"onclick="@(()=>Delete(country))">Delete</button>
                        </td>
                       
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responsehttp = await Repostory.Get<List<Country>>("api/countries");
        Countries = responsehttp.Response!;
    }
    private async Task Delete(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title="Confirmation",
            Text = "Are you sure you want to delete the record?",
            Icon=SweetAlertIcon.Question,
            ShowCancelButton=true,

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if(confirm)
        {
            return;
        }
        var repositoryhttp = await Repostory.Delete($"/api/countries/{country.Id}");
        if (repositoryhttp.Error)
        {

            var messageError = await repositoryhttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        await Load();
        
    }
}