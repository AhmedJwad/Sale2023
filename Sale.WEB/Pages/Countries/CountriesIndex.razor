@page "/country"
@inject IRepository Repostory
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles ="Admin")]
<h3>CountriesIndex</h3>
@if (Countries is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <a class="btn btn-primary" href="/countries/create"><i class="oi-oi-plus">Add Country</i></a>
            </span>
        </div>
        <div class="card-body">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search..." @bind-value="Filter" />
        </div>
        <div class="mx-1">
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filter</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Cancel</button>
        </div>
      </div>
  
       
            
      

    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />


    <GenericList MyList="Countries">

        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Country</th>
                        <th style="width:220px">States / Departments</th>
                        <th style="width:260px"></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var country in Countries!)
                    {
                        <tr>
                            <td>
                                @country.Name
                            </td>
                            <td>
                                @country.StateNumber
                            </td>
                            <td>
                                <a href="/countries/details/@country.Id" class="btn btn-info btn-sm">
                                    <i class="oi oi-list" /> Details
                                </a>
                                <a href="/countries/edit/@country.Id" class="btn btn-warning btn-sm">
                                    <i class="oi oi-pencil" /> Edit
                                </a>
                                <button class="btn btn-danger" onclick="@(()=>Delete(country))">
                                    <i class="oi oi-trash" /> Delete
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>

}

@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/countries?page={page}";
            url2 = $"api/countries/totalPages";
        }
        else
        {
            url1 = $"api/countries?page={page}&filter={Filter}";
            url2 = $"api/countries/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await Repostory.Get<List<Country>>(url1);
            var responseHppt2 = await Repostory.Get<int>(url2);
            Countries = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {

            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
       
    }

    private async Task Delete(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title="Confirmation",
            Text = "Are you sure you want to delete the record?",
            Icon=SweetAlertIcon.Question,
            ShowCancelButton=true,

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if(confirm)
        {
            return;
        }
        var repositoryhttp = await Repostory.Delete($"/api/countries/{country.Id}");
        if (repositoryhttp.Error)
        {

            var messageError = await repositoryhttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        await LoadAsync();

    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}