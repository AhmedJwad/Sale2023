@page "/countries/details/{Id:int}"
@inject IRepository repostry
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (country is null)
{
    <p>Loading</p>
}
else
{
    <h3>@country.Name</h3>
    <div class="mb-2">
        <a class="btn btn-primary" href="/states/create/@country.Id">New State</a>
        <a class="btn btn-success" href="/country">Go back</a>
    </div>
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">      
        <div class="mx-2">
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search..." @bind-value="Filter" />
        </div>
        <div>
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filter</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Cancel</button>
        </div>
    </div>
    <Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

    <GenericList MyList="states">
        <Body>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>State / Department</th>
                        <th style="width:140px">Cities</th>
                        <th style="width:260px"></th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var state in states!)
                    {
                        <tr>
                            <td>
                                @state.Name
                            </td>
                            <td>
                                @state.CityNumber
                            </td>
                            <td>
                                <a class="btn btn-info" href="/states/details/@state.Id">Details</a>
                                <a class="btn btn-warning" href="/states/edit/@state.Id">Edit</a>
                                <button class="btn btn-danger" @onclick=@(() => DeleteAsync(state.Id))>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}


@code {
    private Country? country;
    private List<State>? states;
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";
    [Parameter]
    public int Id { get; set; }

    protected  override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page =1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/states?id={Id}&page={page}";
            url2 = $"api/states/totalPages?id={Id}";
        }
        else
        {            
            url1 = $"api/states?id={Id}&page={page}&filter={Filter}";
            url2 = $"api/states/totalPages?id={Id}&filter={Filter}";

        }
       
        var responseHppt = await repostry.Get<Country>($"api/countries/{Id}");
        var responseHppt2 = await repostry.Get<List<State>>(url1);
        var responseHppt3 = await repostry.Get<int>(url2);
        country = responseHppt.Response;
        states = responseHppt2.Response;
        totalPages = responseHppt3.Response;


    }
    private async Task DeleteAsync(int id )
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
                Title = "Confirmation",
                Text = "Do you really want to delete the record?",
                Icon=SweetAlertIcon.Question,
                ShowCancelButton=true,
                CancelButtonText="No",
                ConfirmButtonText="Yes",
        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if(confirm)
        {
            return;
        }
        var responseHttp = await repostry.Delete($"/api/states/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != System.Net.HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();

    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }
}


