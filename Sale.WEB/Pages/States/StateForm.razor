@inject SweetAlertService sweetAlertService


<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"/>
<EditForm EditContext="editContext" OnValidSubmit="onvalidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>States</label>
        <div>
            <InputText class="form-control" @bind-Value="@state.Name" />
            <ValidationMessage For="@(() => state.Name)" />

        </div>
    </div>
    <button class="btn btn-primary" type="submit">Create</button>
    <button class="btn btn-success" @onclick="ReturnAction">Go Back</button>

</EditForm>

@code {
    private EditContext editContext = null!;
    [Parameter]
    [EditorRequired]
    public State state { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback onvalidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully{ get; set; }

    protected override void OnInitialized()
    {
        editContext = new(state);
    }
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if(!formWasMofied || FormPostedSuccessfully )
        {
            return;
        }
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmation",
                Text = "Do you really want to leave the record?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes",
            });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        context.PreventNavigation();

    }
}
