@page "/products"
@inject IRepository repostry
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles ="Admin")]

@if (products is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="products">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-star"/> Productos
                        <a class="btn btn-sm btn-primary float-end" href="/products/create"><i class="oi oi-plus"/> Add Products</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> filter</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clear</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                            TotalPages="totalPage"
                            SelectedPage="SelectedPageAsync" />

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Price</th>
                                <th>Inventry</th>
                                <th>Categories</th>
                                <th>Images</th>
                                <th>Main Image</th>
                                <th style="width:200px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>
                                        @product.Name
                                    </td>
                                    <td>
                                        @product.Description
                                    </td>
                                    <td>
                                        @($"{product.Price:C2}")
                                    </td>
                                    <td>
                                        @($"{product.Stock:N2}")
                                    </td>
                                    <td>
                                        @product.ProductCategoriesNumber
                                    </td>
                                    <td>
                                        @product.MainImage
                                    </td>
                                    <td>
                                        <img src="@product.MainImage" style="width:100px;"/>
                                    </td>
                                    <td>
                                        <a href="/products/edit/@product.Id" class="btn btn-warning"><i class="oi oi-pencil" /> Edit</a>
                                        <button class="btn btn-danger" @onclick=@(() => Delete(product.Id))><i class="oi oi-trash" /> Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}


@code {
    private int currentPage = 1;
    private int totalPage;

    public List<Product>? products { get; set; }
    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }



    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page=1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(filter))
        {
            url1 = $"api/products?page={page}";
            url2 = $"api/products/totalPages";
        }
        else
        {
            url1 = $"api/products?page={page}&filter={filter}";
            url2 = $"api/products/totalPages?filter={filter}";
        }

        try
        {
            var responseHppt = await repostry.Get<List<Product>>(url1);
            var responseHppt2 = await repostry.Get<int>(url2);
            products = responseHppt.Response!;
           totalPage = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }

    }
    private async Task Delete(int ProductId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title="confirmation",
            Text="Are you sure to delete this record",
            Icon=SweetAlertIcon.Question,
            ShowCancelButton=true,

        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if(confirm)
        {
            return;
        }
        var resoponsehttp = await repostry.Delete($"api/products/{ProductId}");
        if(resoponsehttp.Error)
        {
            if(resoponsehttp.HttpResponseMessage.StatusCode==System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            var messageerror = await resoponsehttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageerror, SweetAlertIcon.Error);
            return;
        }
        await LoadAsync();
    }
    private async Task CleanFilterAsync()
    {
        filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
